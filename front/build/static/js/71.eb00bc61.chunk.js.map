{"version":3,"file":"static/js/71.eb00bc61.chunk.js","mappings":"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","sources":["components/charts/TimeAreaChart.js","components/tables/SortTable.js","utils/archiveAlarmSort.js","components/tables/AlarmSortTable.js","pages/testPage/AntSwitch.js","components/charts/AreaChartTest.js","pages/testPage/index.js","utils/timeFormatter.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { useQuery } from 'react-query';\r\nimport Service from 'API/Service';\r\nimport moment from 'moment';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\n\r\nconst TimeAreaChart = ({ queryData, name }) => {\r\n    const theme = useTheme();\r\n\r\n    const { secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n\r\n    const [series, setSeries] = useState([]);\r\n\r\n    const { isLoading } = useQuery(\r\n        ['chartData', queryData], () => Service.getArchive(queryData),\r\n        {\r\n            select: (data) => data.archive,\r\n            refetchOnWindowFocus: false,\r\n            onSuccess: (data) => {\r\n\r\n                const chartData = data?.map((element) => {\r\n                    return [element.date, element.dec];\r\n                })\r\n                console.log(data, chartData);\r\n                setSeries([\r\n                    {\r\n                        name,\r\n                        data: chartData\r\n                    },\r\n                ])\r\n            },\r\n            enabled: !!queryData\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n            chart: {\r\n                id: 'area-datetime',\r\n                type: 'area',\r\n                width: \"100%\",\r\n                zoom: {\r\n                    autoScaleYaxis: true\r\n                },\r\n                events: {\r\n                    // markerClick: function (event, chartContext, { seriesIndex, dataPointIndex, config }) {\r\n                    //     console.log(event, chartContext.data.twoDSeries[dataPointIndex], seriesIndex, dataPointIndex, config);\r\n                    // }\r\n                }\r\n            },\r\n\r\n            colors: [theme.palette.primary.main],\r\n            xaxis: {\r\n                type: 'datetime',\r\n                tickAmount: 4,\r\n                tickPlacement: 'between',\r\n                labels: {\r\n                    style: {\r\n                        colors: [\r\n                            secondary\r\n                        ]\r\n                    },\r\n                    rotateAlways: false,\r\n                    formatter: function (value) {\r\n\r\n                        return `${moment(value).format('DD.MM.YYYY')} ${moment(value).format('HH:mm:ss')}`;\r\n                    },\r\n\r\n\r\n                },\r\n                axisBorder: {\r\n                    show: true,\r\n                    color: line\r\n                },\r\n                // axisTicks: {\r\n                //     show: true,\r\n                //     borderType: 'solid',\r\n                //     color: '#78909C',\r\n                //     height: 6,\r\n                //     offsetX: 0,\r\n                //     offsetY: 0\r\n                // },\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [secondary]\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                borderColor: line,\r\n                padding: {\r\n                    top: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    left: 15\r\n                },\r\n            },\r\n            tooltip: {\r\n                theme: 'light',\r\n            },\r\n            noData: {\r\n                text: isLoading ? 'Загрузка' : \"Выберите временной отрезок\"\r\n            }\r\n        }));\r\n    }, []);\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\nexport default TimeAreaChart;\r\n","import React, { useMemo, useState } from 'react';\r\nimport { Table } from 'antd';\r\nimport moment from 'moment';\r\nimport ruRu from 'antd/locale/ru_RU';\r\nimport { timeFormattedColon } from 'utils/timeFormatter';\r\nimport { Button, Grid, Stack } from \"@mui/material\";\r\nimport { useQuery } from 'react-query';\r\nimport Service from 'API/Service';\r\nimport archiveAlarmSort from 'utils/archiveAlarmSort';\r\nimport { DateTimePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport 'dayjs/locale/ru';\r\nimport { ruRU } from '@mui/x-date-pickers/locales';\r\n\r\nconst formatDate = (date) => moment(date).format('HH:mm:ss DD.MM.YYYY');\r\n\r\nconst initialDate = {\r\n    dateStart: null,\r\n    dateStop: null\r\n};\r\n\r\nconst SortTable = ({ id }) => {\r\n    const [date, setDate] = useState(initialDate);\r\n    const [queryData, setQueryData] = useState({ id });\r\n\r\n    const handleSubmit = (FilterDropdownProps) => {\r\n        FilterDropdownProps.confirm();\r\n        const query = {};\r\n        if (date.dateStart !== null) query.dateStart = date.dateStart;\r\n        if (date.dateStop !== null) query.period = date.dateStop - date.dateStart;\r\n        setQueryData({\r\n            id,\r\n            ...query\r\n        })\r\n\r\n    }\r\n\r\n    const handleReset = (FilterDropdownProps) => {\r\n        FilterDropdownProps.clearFilters();\r\n        setDate(initialDate);\r\n    }\r\n\r\n    const handleDate = (date, FilterDropdownProps) => {\r\n        FilterDropdownProps.setSelectedKeys('true');\r\n        setDate(date);\r\n    }\r\n\r\n    const { data: rawData, isLoading } = useQuery(\r\n        ['archiveError1', queryData], () => Service.getArchiveAlarm(queryData),\r\n        {\r\n            select: (data) => {\r\n                return archiveAlarmSort(data.errorArchive);\r\n            },\r\n            refetchOnWindowFocus: false,\r\n            enabled: !!queryData.id\r\n        }\r\n    );\r\n    const data = useMemo(() =>\r\n        rawData?.map((el) => {\r\n            return {\r\n                ...el, dateFormat: formatDate(el.date),\r\n                date2Format: el.date2 ? formatDate(el.date2) : '-',\r\n                timeStop: el.date2 && el.date2 - el.date,\r\n                timeStopFormat: el.date2 ? timeFormattedColon(((el.date2 - el.date) / 1000)) : '-'\r\n            }\r\n        }),\r\n        [rawData]);\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Дата',\r\n            dataIndex: 'dateFormat',\r\n            key: 'date',\r\n            width: 150,\r\n            align: 'center',\r\n            sorter: (a, b) => a.date - b.date,\r\n            filters: [{ dateStart: '', dateStop: '' }],\r\n            filterDropdown: (FilterDropdownProps) => {\r\n                return (\r\n                    <Grid>\r\n                        <Stack spacing={1.5} sx={{ p: 1 }}>\r\n                            <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale=\"ru\" localeText={ruRU.components.MuiLocalizationProvider.defaultProps.localeText}>\r\n                                <DateTimePicker value={date.dateStart} autoFocus={true} sx={{ mt: 1 }}\r\n                                    label=\"Начальная дата\"\r\n                                    onChange={e => handleDate({ ...date, dateStart: e.$d.valueOf() }, FilterDropdownProps)} />\r\n                                <DateTimePicker value={date.dateStop} sx={{ mt: 1 }}\r\n                                    label=\"Конечная дата\"\r\n                                    onChange={e => handleDate({ ...date, dateStop: e.$d.valueOf() }, FilterDropdownProps)} />\r\n                            </LocalizationProvider>\r\n\r\n                        </Stack>\r\n                        <Grid container justifyContent={'space-between'} sx={{ p: 1 }}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleReset(FilterDropdownProps)}\r\n                                size=\"small\"\r\n                                disabled={FilterDropdownProps.selectedKeys.length === 0}\r\n                            >\r\n                                Сбросить\r\n                            </Button>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => handleSubmit(FilterDropdownProps)}\r\n                                size=\"small\"\r\n                            >\r\n                                ОК\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            title: 'Сообщения',\r\n            dataIndex: 'message',\r\n            key: 'message',\r\n            width: 300,\r\n            filters: [\r\n                { text: 'Заклейщик. Расходные материалы на исходе', value: 'Заклейщик. Расходные материалы на исходе' },\r\n                { text: 'Укладка. Ошибка сервопривода', value: 'Укладка. Ошибка сервопривода' },\r\n            ],\r\n            // filteredValue: filteredInfo.message || null,\r\n            onFilter: (value, record) => record.message.includes(value),\r\n            // sorter: (a, b) => a.message.length - b.message.length,\r\n        },\r\n        {\r\n            title: 'Дата восстановления',\r\n            dataIndex: 'date2Format',\r\n            key: 'date2',\r\n            width: 150,\r\n            align: 'center',\r\n            sorter: (a, b) => a.date2 - b.date2,\r\n        },\r\n        {\r\n            title: 'Время простоя',\r\n            dataIndex: 'timeStopFormat',\r\n            key: 'timeStop',\r\n            width: 150,\r\n            align: 'center',\r\n            sorter: (a, b) => a.timeStop - b.timeStop,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table\r\n            locale={ruRu.Table}\r\n            columns={columns}\r\n            dataSource={data}\r\n            size='medium'\r\n            pagination={false}\r\n            scroll={{ y: 450, x: 600 }}\r\n            tableLayout='auto'\r\n            loading={isLoading}\r\n        // rowClassName={(record, index) => record.bit === 2 ? 'colorIcon' : record.bit === 12 ? 'colorIconWarning' : ''}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SortTable;","\r\nexport default function archiveAlarmSort(data) {\r\n    let arr = Object.assign([], data);\r\n    arr.reverse();\r\n    let arr2 = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].status) {\r\n            for (let j = 0 + i; j < arr.length; j++) {\r\n                if (!arr[j].status && (arr[i].bit === arr[j].bit)) {\r\n                    arr2.push({ ...arr[i], date2: arr[j].date });\r\n                    break;\r\n                }\r\n                if (j === arr.length - 1) {\r\n                    arr2.push({ ...arr[i], date2: null });\r\n                    console.log(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr2.reverse();\r\n}","import SortTable from \"./SortTable\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport MainCard from \"components/MainCard\";\r\n\r\nconst AlarmSortTable = ({ id }) => {\r\n    return (\r\n        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Grid item>\r\n                <Typography variant=\"h4\">Аварийные события</Typography>\r\n            </Grid>\r\n            <MainCard content={false} sx={{ mt: 2 }}>\r\n                <SortTable id={id} />\r\n            </MainCard>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default AlarmSortTable;","const { default: styled } = require(\"@emotion/styled\");\r\nconst { Switch } = require(\"@mui/material\");\r\n\r\n\r\n\r\nconst AntSwitch = styled(Switch)(({ theme }) => ({\r\n    width: 28 * 2.5,\r\n    height: 16 * 2,\r\n    padding: 0,\r\n    display: 'flex',\r\n    '&:active': {\r\n        '& .MuiSwitch-thumb': {\r\n            width: 15 * 2.5,\r\n        },\r\n        '& .MuiSwitch-switchBase.Mui-checked': {\r\n            transform: 'translateX(25px)',\r\n        },\r\n    },\r\n    '& .MuiSwitch-switchBase': {\r\n        padding: 2 * 2,\r\n        '&.Mui-checked': {\r\n            transform: 'translateX(38px)',\r\n            color: '#fff',\r\n            '& + .MuiSwitch-track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.mode === 'dark' ? '#177ddc' : '#1890ff',\r\n            },\r\n        },\r\n    },\r\n    '& .MuiSwitch-thumb': {\r\n        boxShadow: '0 2px 4px 0 rgb(0 35 11 / 20%)',\r\n        width: 12 * 2,\r\n        height: 12 * 2,\r\n        borderRadius: 6 * 2,\r\n        transition: theme.transitions.create(['width'], {\r\n            duration: 200,\r\n        }),\r\n    },\r\n    '& .MuiSwitch-track': {\r\n        borderRadius: 16 * 2 / 2,\r\n        opacity: 1,\r\n        backgroundColor:\r\n            theme.palette.mode === 'dark' ? 'rgba(255,255,255,.35)' : 'rgba(0,0,0,.25)',\r\n        boxSizing: 'border-box',\r\n    },\r\n}));\r\n\r\nexport default AntSwitch;","import { ZoomOutOutlined } from \"@ant-design/icons\";\r\nimport { Grid, IconButton, useTheme } from \"@mui/material\";\r\nimport Service from \"API/Service\";\r\nimport moment from \"moment\";\r\nimport { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport {\r\n    AreaChart,\r\n    Area,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    ReferenceArea,\r\n    ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\n\r\nconst initialDate = [\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688439017710,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688439412998,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688439615970,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688439818684,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688440021680,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5803,\r\n        \"date\": 1688440224740,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688440427589,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688440630613,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688440833276,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688441035992,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688441238733,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688441441562,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688441644154,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688441846961,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688442049789,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    },\r\n    {\r\n        \"dec\": 5804,\r\n        \"date\": 1688442252350,\r\n        \"programPackId\": \"647ead32652edbe984336ec6\"\r\n    }]\r\n\r\nconst initialState = {\r\n    data: [],\r\n    left: \"dataMin\",\r\n    right: \"dataMax\",\r\n    refAreaLeft: \"\",\r\n    refAreaRight: \"\",\r\n    top: \"dataMax+30\",\r\n    bottom: \"dataMin-30\",\r\n    animation: true\r\n};\r\n\r\nconst AreaChartTest = ({ queryData, name }) => {\r\n\r\n    const [state, setState] = useState(initialState);\r\n    const { palette } = useTheme();\r\n    const { isLoading } = useQuery(\r\n        ['chartData', queryData], () => Service.getArchive(queryData),\r\n        {\r\n            select: (data) => data.archive,\r\n            refetchOnWindowFocus: false,\r\n            onSuccess: (data) => {\r\n\r\n                const chartData = data?.map((element) => {\r\n                    return { date: Number(element.date), dec: Number(element.dec) };\r\n                })\r\n                console.log(data, chartData);\r\n                setState({\r\n                    ...state, data: chartData,\r\n                    left: \"dataMin\",\r\n                    right: \"dataMax\"\r\n                });\r\n            },\r\n            enabled: !!queryData\r\n        }\r\n    );\r\n\r\n\r\n\r\n    const zoom = () => {\r\n        let { refAreaLeft, refAreaRight } = state;\r\n\r\n        if (refAreaLeft === refAreaRight || refAreaRight === \"\") {\r\n            setState({\r\n                ...state,\r\n                refAreaLeft: \"\",\r\n                refAreaRight: \"\"\r\n            });\r\n            return;\r\n        }\r\n        // xAxis domain\r\n        if (refAreaLeft > refAreaRight)\r\n            [refAreaLeft, refAreaRight] = [refAreaRight, refAreaLeft];\r\n\r\n        setState({\r\n            ...state,\r\n            refAreaLeft: \"\",\r\n            refAreaRight: \"\",\r\n            left: refAreaLeft,\r\n            right: refAreaRight,\r\n        });\r\n    }\r\n\r\n    const zoomOut = () => {\r\n        setState({\r\n            ...state,\r\n            refAreaLeft: \"\",\r\n            refAreaRight: \"\",\r\n            left: \"dataMin\",\r\n            right: \"dataMax\",\r\n            top: \"dataMax+30\",\r\n            bottom: \"dataMin-30\",\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Grid container sx={{ userSelect: \"none\", p: 1 }} justifyContent={'right'} >\r\n            <IconButton\r\n                onClick={zoomOut}\r\n            >\r\n                <ZoomOutOutlined />\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={zoomOut}\r\n            >\r\n                <ZoomOutOutlined />\r\n            </IconButton>\r\n            <ResponsiveContainer width='100%' minHeight={400}>\r\n                <AreaChart\r\n                    data={state.data}\r\n                    onMouseDown={(e) =>\r\n                        setState({\r\n                            ...state, refAreaLeft: e?.activeLabel\r\n                        })\r\n                    }\r\n                    onMouseMove={(e) =>\r\n                        state.refAreaLeft &&\r\n                        setState({\r\n                            ...state, refAreaRight: e?.activeLabel\r\n                        })\r\n                    }\r\n                    onMouseUp={zoom}\r\n                >\r\n                    <defs>\r\n                        <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor={palette.primary.main} stopOpacity={0.6} />\r\n                            <stop offset=\"100%\" stopColor={palette.primary.main} stopOpacity={0.1} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <CartesianGrid strokeDasharray=\"2 5\" vertical={false} />\r\n                    <XAxis\r\n                        allowDataOverflow\r\n                        dataKey=\"date\"\r\n                        domain={[state.left, state.right]}\r\n                        type=\"number\"\r\n                        tickSize={10}\r\n                        axisLine={{ backgroundColor: 'red' }}\r\n                        tickCount={7}\r\n                        interval='preserveStartEnd'\r\n                        tick={{ fontSize: '0.75rem', }}\r\n                        tickFormatter={(value) => `${moment(value).format('DD.MM.YYYY')} ${moment(value).format('HH:mm:ss')}`}\r\n                    />\r\n\r\n                    <YAxis\r\n                        name=\"Производительность\"\r\n                        allowDataOverflow\r\n                        domain={[state.bottom, state.top]}\r\n                        type=\"number\"\r\n                        yAxisId=\"1\"\r\n                        axisLine={false}\r\n                        tickLine={false}\r\n                        tick={{ fontSize: '0.75rem' }}\r\n                    />\r\n                    <Tooltip name=\"Дата\"\r\n                        formatter={(value) => [value, name]}\r\n                        labelFormatter={(value) => `${moment(value).format('DD.MM.YYYY')} ${moment(value).format('HH:mm:ss')}`} />\r\n                    <Area\r\n                        yAxisId=\"1\"\r\n                        dataKey=\"dec\"\r\n                        stroke={palette.primary.main}\r\n                        strokeWidth={2}\r\n                        fill=\"url(#colorPv)\"\r\n                        animationDuration={300}\r\n                        fillOpacity={0.6}\r\n                    />\r\n                    {state.refAreaLeft && state.refAreaRight ? (\r\n                        <ReferenceArea\r\n                            yAxisId=\"1\"\r\n                            x1={state.refAreaLeft}\r\n                            x2={state.refAreaRight}\r\n                            strokeOpacity={0.1}\r\n                            stroke={palette.primary.main}\r\n\r\n                        />\r\n                    ) : null}\r\n                </AreaChart>\r\n            </ResponsiveContainer>\r\n        </Grid >\r\n    );\r\n\r\n}\r\n\r\nexport default AreaChartTest;","// material-ui\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Grid,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Menu,\r\n    Stack,\r\n    TextField,\r\n    Typography,\r\n    useTheme\r\n} from '@mui/material';\r\n// components\r\nimport MainCard from 'components/MainCard';\r\nimport { useState } from 'react';\r\nimport { CheckOutlined, CloseOutlined, FilterFilled, FilterOutlined, InfoOutlined, MoreOutlined } from '@ant-design/icons';\r\nimport TimeAreaChart from 'components/charts/TimeAreaChart';\r\nimport AntSwitch from './AntSwitch';\r\nimport AlarmSortTable from 'components/tables/AlarmSortTable';\r\nimport AreaChartTest from 'components/charts/AreaChartTest';\r\n\r\nconst id = \"647ea168652edbe984336ebf\";\r\n\r\nconst TestPage = () => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [lampBool, setLampBool] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const theme = useTheme();\r\n    const [date, setDate] = useState({\r\n        dateStart: Date.now() - 3600 * 100000,\r\n        dateStop: Date.now()\r\n    });\r\n    const [queryData, setQueryData] = useState({\r\n        dateStart: Date.now() - 36000 * 10000,\r\n        period: 36000 * 100,\r\n        id: '647ead32652edbe984336ec6'\r\n    });\r\n\r\n\r\n\r\n    // const { data: TableData } = useQuery(\r\n    //     ['archiveError1', id], () => Service.getArchiveAlarm(id),\r\n    //     {\r\n    //         select: (data) => {\r\n\r\n    //             return data.errorArchive;\r\n    //         },\r\n    //         refetchOnWindowFocus: false,\r\n    //         enabled: !!id,\r\n    //         refetchInterval: 2000\r\n    //     }\r\n    // );\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setQueryData({\r\n            ...queryData,\r\n            dateStart: new Date(date.dateStart).valueOf(),\r\n            period: new Date(date.dateStop).valueOf() - new Date(date.dateStart).valueOf()\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Grid container rowSpacing={4.5} columnSpacing={2.75} >\r\n            {/* row 1 */}\r\n            <Grid item xs={12} sx={{\r\n                mb: - 2.25\r\n            }}>\r\n                <Typography variant=\"h5\">C Днем Рождения!</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <MainCard content={false}>\r\n                    <Grid container justifyContent={\"right\"}>\r\n                        <IconButton\r\n                            aria-label=\"more\"\r\n                            id=\"long-button\"\r\n                            aria-controls={open ? 'long-menu' : undefined}\r\n                            aria-expanded={open ? 'true' : undefined}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleClick}\r\n                            size='medium'\r\n                        >\r\n                            {open ? <FilterFilled /> : <FilterOutlined />}\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"long-menu\"\r\n                            // MenuListProps={{\r\n                            //     'aria-labelledby': 'long-button',\r\n                            // }}\r\n                            anchorEl={anchorEl}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            PaperProps={{\r\n                                style: {\r\n                                    padding: 10\r\n                                    // maxHeight: 48 * 4.5,\r\n                                    // width: '20ch',\r\n                                },\r\n                            }}\r\n                        >\r\n                            <Stack spacing={1}>\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    placeholder=\"Начальная дата\"\r\n                                    type=\"datetime-local\"\r\n                                    sx={{ width: 200 }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true\r\n                                    }}\r\n                                    value={date.dateStart}\r\n                                    onChange={(e) => setDate({ ...date, dateStart: e.target.value })}\r\n                                />\r\n                                <TextField\r\n                                    id=\"datetime-local\"\r\n                                    placeholder=\"Конечная дата\"\r\n                                    type=\"datetime-local\"\r\n                                    sx={{ width: 200 }}\r\n                                    InputLabelProps={{\r\n                                        shrink: true\r\n                                    }}\r\n                                    value={date.dateStop}\r\n                                    onChange={(e) => setDate({ ...date, dateStop: e.target.value })}\r\n                                />\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleSubmit}\r\n                                >\r\n                                    Построить\r\n                                </Button>\r\n                            </Stack>\r\n\r\n                        </Menu>\r\n                    </Grid>\r\n                    {/* <Box sx={{ pt: 1, pr: 2 }}>\r\n                        <TimeAreaChart queryData={queryData} name={'Производительность'} />\r\n                    </Box> */}\r\n                </MainCard >\r\n            </Grid >\r\n\r\n            <Grid item xs={12} md={12} lg={4}>\r\n                <MainCard content={false}>\r\n                    <List\r\n                        component=\"nav\"\r\n                        sx={{\r\n                            px: 0,\r\n                            py: 0,\r\n                        }}\r\n                    >\r\n\r\n                        <ListItem sx={{\r\n                            height: 80\r\n                        }} divider>\r\n                            <ListItemText primary={<Typography variant=\"subtitle1\">Включить сервопривод</Typography>} />\r\n                            <ListItemAvatar>\r\n\r\n                                <AntSwitch onClick={() => { setLampBool(!lampBool) }} />\r\n                            </ListItemAvatar>\r\n                        </ListItem>\r\n                        <ListItem sx={{\r\n                            height: 80\r\n                        }} divider>\r\n                            <ListItemText primary={<Typography variant=\"subtitle1\">Статус сервопривода ось X</Typography>} />\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n\r\n                                    sx={{\r\n                                        bgcolor: lampBool ? theme.palette.success.main : theme.palette.error.main\r\n                                    }}\r\n                                >\r\n                                    {lampBool ? <CheckOutlined /> : <InfoOutlined />}\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                        </ListItem>\r\n                        <ListItem sx={{\r\n                            height: 80\r\n                        }} divider>\r\n                            <ListItemText primary={<Typography variant=\"subtitle1\">Статус сервопривода ось Y</Typography>} />\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n\r\n                                    sx={{\r\n                                        bgcolor: lampBool ? theme.palette.success.main : theme.palette.error.main\r\n                                    }}\r\n                                >\r\n                                    {lampBool ? <CheckOutlined /> : <InfoOutlined />}\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                        </ListItem>\r\n                    </List>\r\n                </MainCard>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={12} md={12} lg={12}>\r\n                <MainCard content={false}> */}\r\n            {/* {TableData?.length > 0 && <AlarmTable rows={archiveAlarmSort(TableData)} />} */}\r\n            {/* <Box>\r\n                        {TableData?.length > 0 && <SortTable rows={archiveAlarmSort(TableData)} />}\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid> */}\r\n\r\n            {/* <Grid item xs={12} md={12} lg={12}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Аварийные события</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <RangePicker onChange={(e) => console.log(e)} locale={ruRu.DatePicker} showTime />\r\n                    </Grid>\r\n                    <Box visibility={!open ? 'hidden' : 'visible'} sx={{ position: 'relative', right: open ? '250px' : '0px', opacity: open ? 1 : 0, transition: 'all 1s ease-out', transform: 'left 5s cubic-bezier(0.0, 0.5, 0.5, 1.0)', transformOrigin: 'right center 0', }}>\r\n                        <Grid>\r\n                            {/* <TextField\r\n                                id=\"datetime-local\"\r\n                                placeholder=\"Next Appointment\"\r\n                                type=\"datetime-local\"\r\n                                sx={{ width: 200 }}\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                value={dateFrom}\r\n                                onChange={(e) => setDateFrom(e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                id=\"datetime-local\"\r\n                                placeholder=\"Next Appointment\"\r\n                                type=\"datetime-local\"\r\n                                sx={{ width: 200 }}\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                value={dateTo}\r\n                                onChange={(e) => setDateTo(e.target.value)}\r\n                            />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={handleSubmit}\r\n                            >\r\n                                Построить\r\n                            // </Button> */}\r\n            {/* </Grid>\r\n                    </Box>\r\n                    <Grid item >\r\n                        <IconButton\r\n                            // aria-label=\"more\"\r\n                            // id=\"long-button\"\r\n                            // aria-controls={open ? 'long-menu' : undefined}\r\n                            // aria-expanded={open ? 'true' : undefined}\r\n                            // aria-haspopup=\"true\"\r\n                            onClick={handleClick}\r\n                            size='lg'\r\n                        >\r\n                            {<CalendarOutlined style={{ color: open ? theme.palette.primary.main : theme.palette.grey[700] }} />}\r\n                        </IconButton>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 2 }}>\r\n                    {TableData?.length > 0 && <SortTable rows={archiveAlarmSort(TableData)} />}\r\n                </MainCard>\r\n            </Grid>  */}\r\n\r\n\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <AlarmSortTable id={id} />\r\n            </Grid>\r\n            <Grid item xs={12} md={12} lg={12}>\r\n                <MainCard content={false}>\r\n                    <AreaChartTest queryData={queryData} name='Производительность' />\r\n                </MainCard>\r\n            </Grid>\r\n        </Grid >\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default TestPage;\r\n","export function zeroFormatter(hour, minutes, seconds) {\r\n   return ([\r\n      hour.toString().padStart(2, '0'),\r\n      minutes.toString().padStart(2, '0'),\r\n      seconds.toString().padStart(2, '0')\r\n   ].join(':'));\r\n}\r\n\r\nexport function secToTime(timeStamp) {\r\n   let h = Math.floor(timeStamp / 3600);\r\n   let m = Math.floor(timeStamp / 60) - (h * 60);\r\n   let s = Math.floor(timeStamp % 60);\r\n   return [h, m, s];\r\n}\r\n\r\nexport function decOfNum(number, titles) {\r\n   let decCache = [],\r\n      decCases = [2, 0, 1, 1, 1, 2];\r\n   if (!decCache[number]) decCache[number] = number % 100 > 4 && number % 100 < 20 ? 2 : decCases[Math.min(number % 10, 5)];\r\n   return titles[decCache[number]];\r\n}\r\n\r\nexport function timeFormattedString(timeStamp) {\r\n   const [h, m, s] = secToTime(timeStamp);\r\n   let valueFormat = '';\r\n   if (h > 0) {\r\n      valueFormat = h + ' ' + decOfNum(h, ['час', 'часа', 'часов']);\r\n   }\r\n   if (m > 0) {\r\n      valueFormat += ' ' + m + ' ' + decOfNum(m, ['минута', 'минуты', 'минут']);\r\n   }\r\n   if (s > 0 && h === 0) {\r\n      valueFormat += ' ' + s + ' ' + decOfNum(s, ['секунда', 'секунды', 'секунд']);\r\n   }\r\n\r\n   return valueFormat;\r\n}\r\n\r\nexport function timeFormattedColon(timeStamp) {\r\n   const [h, m, s] = secToTime(timeStamp);\r\n   return zeroFormatter(h, m, s);\r\n}"],"names":["areaChartOptions","chart","height","type","toolbar","show","dataLabels","enabled","stroke","curve","width","grid","strokeDashArray","_ref","queryData","name","theme","useTheme","secondary","palette","text","line","divider","_useState","useState","_useState2","_slicedToArray","options","setOptions","_useState3","_useState4","series","setSeries","isLoading","useQuery","Service","select","data","archive","refetchOnWindowFocus","onSuccess","chartData","map","element","date","dec","console","log","useEffect","prevState","_objectSpread","id","zoom","autoScaleYaxis","events","colors","primary","main","xaxis","tickAmount","tickPlacement","labels","style","rotateAlways","formatter","value","concat","moment","format","axisBorder","color","yaxis","borderColor","padding","top","right","bottom","left","tooltip","noData","_jsx","ReactApexChart","formatDate","initialDate","dateStart","dateStop","setDate","setQueryData","handleDate","FilterDropdownProps","setSelectedKeys","_useQuery","arr","Object","assign","reverse","arr2","i","length","status","j","bit","push","date2","archiveAlarmSort","errorArchive","rawData","useMemo","el","dateFormat","date2Format","timeStop","timeStopFormat","timeFormattedColon","columns","title","dataIndex","key","align","sorter","a","b","filters","filterDropdown","_jsxs","Grid","children","Stack","spacing","sx","p","LocalizationProvider","dateAdapter","AdapterDayjs","adapterLocale","localeText","ruRU","DateTimePicker","autoFocus","mt","label","onChange","e","$d","valueOf","container","justifyContent","Button","onClick","clearFilters","handleReset","size","disabled","selectedKeys","variant","confirm","query","period","handleSubmit","onFilter","record","message","includes","Table","locale","ruRu","dataSource","pagination","scroll","y","x","tableLayout","loading","alignItems","item","Typography","MainCard","content","SortTable","styled","require","default","Switch","display","transform","opacity","backgroundColor","mode","boxShadow","borderRadius","transition","transitions","create","duration","boxSizing","initialState","refAreaLeft","refAreaRight","animation","state","setState","zoomOut","Number","userSelect","IconButton","ZoomOutOutlined","ResponsiveContainer","minHeight","AreaChart","onMouseDown","activeLabel","onMouseMove","onMouseUp","_ref2","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","vertical","XAxis","allowDataOverflow","dataKey","domain","tickSize","axisLine","tickCount","interval","tick","fontSize","tickFormatter","YAxis","yAxisId","tickLine","Tooltip","labelFormatter","Area","strokeWidth","fill","animationDuration","fillOpacity","ReferenceArea","strokeOpacity","anchorEl","setAnchorEl","lampBool","setLampBool","open","Boolean","_useState5","Date","now","_useState6","_useState7","_useState8","rowSpacing","columnSpacing","xs","mb","md","lg","undefined","event","currentTarget","FilterFilled","FilterOutlined","Menu","onClose","PaperProps","TextField","placeholder","InputLabelProps","shrink","target","preventDefault","List","component","px","py","ListItem","ListItemText","ListItemAvatar","AntSwitch","Avatar","bgcolor","success","error","CheckOutlined","InfoOutlined","AlarmSortTable","AreaChartTest","secToTime","timeStamp","h","Math","floor","decOfNum","number","titles","decCache","min","timeFormattedString","_secToTime","_secToTime2","m","s","valueFormat","minutes","seconds","_secToTime3","_secToTime4","toString","padStart","join"],"sourceRoot":""}