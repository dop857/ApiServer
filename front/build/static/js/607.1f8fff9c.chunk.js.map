{"version":3,"file":"static/js/607.1f8fff9c.chunk.js","mappings":"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","sources":["pages/station/StationItem.jsx","pages/station/StationList.jsx","pages/station/index.js","utils/hooks/useFetching.js"],"sourcesContent":["import moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Service from \"../../API/Service\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Box, Button, Chip, Divider, Grid, Stack, Typography } from \"@mui/material\";\r\nimport MainCard from \"components/MainCard\";\r\n\r\nfunction StationItem({ station }) {\r\n    const navigate = useNavigate();\r\n\r\n    const { data } = useQuery(\r\n        ['lastActive', station._id], () => Service.getLastActive(station._id),\r\n        {\r\n            select: (data) => {\r\n                return data?.lastActive\r\n            },\r\n            refetchOnWindowFocus: false,\r\n            refetchInterval: 1000,\r\n        }\r\n    );\r\n\r\n\r\n    const dateParse = (date) => {\r\n        const dateX = moment(Number(date)).format('DD.MM.YYYY, HH:mm:ss');\r\n        return dateX;\r\n    }\r\n\r\n    const onClickHandler = (id) => {\r\n        navigate(\"/devices\", { state: id });\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={14} sm={8} md={5} lg={4}>\r\n            <MainCard contentSX={{ p: 2.25 }} >\r\n                <Box>\r\n                    <Grid container sx={{ mb: 1.5 }}>\r\n                        <Grid item xs>\r\n                            <Typography variant=\"h3\">{station.name || 'Название не задано'}</Typography>\r\n                        </Grid>\r\n                        <Grid item alignContent={\"right\"}>\r\n                            <Chip label={data?.activeBool ? \"Подключен\" : \"Отключен\"} variant=\"contained\" color={data?.activeBool ? \"success\" : \"error\"} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Divider component=\"div\" primary=\"dark\" />\r\n                <Stack sx={{ mt: 1.5 }} spacing={1}>\r\n                    <Typography variant=\"h6\">{\"Интервал опроса: \" + station.interval}</Typography>\r\n                    <Typography variant=\"h6\">{\"Расположение: \" + station.placeName}</Typography>\r\n                    <Typography variant=\"h6\">{\"Компания: \" + station.company}</Typography>\r\n                    <Typography variant=\"h6\">{`Последний опрос:  ${(data?.lastActive && dateParse(data?.lastActive)) || \"Загрузка...\"}`}</Typography>\r\n                    <Button\r\n                        size=\"medium\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        // disabled={!data?.activeBool}\r\n                        onClick={() => onClickHandler(station?._id)}\r\n                    >\r\n                        Подробнее\r\n                    </Button>\r\n                </Stack>\r\n\r\n            </MainCard>\r\n        </Grid >\r\n    );\r\n}\r\n\r\nexport default StationItem;","import { useEffect, useState } from \"react\";\r\nimport Service from \"../../API/Service\";\r\nimport { useFetching } from \"../../utils/hooks/useFetching\";\r\nimport StationItem from \"./StationItem\";\r\nfunction StationList() {\r\n    const [stations, setStations] = useState([])\r\n    const [fetchStation, isStatationLoading, stationError] = useFetching(async () => {\r\n        const response = await Service.getStation();\r\n        setStations(response.station);\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchStation();\r\n    }, [])\r\n\r\n\r\n\r\n    if (isStatationLoading) return <h1>Загрузка...</h1>;\r\n    if (stationError) return <h1>{stationError}</h1>;\r\n    return (\r\n        <>\r\n            {\r\n                stations.map((station) => {\r\n                    return (\r\n                        <StationItem\r\n                            key={station._id}\r\n                            station={station}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StationList;","import { Grid, Typography } from \"@mui/material\";\r\nimport StationList from \"./StationList\";\r\n\r\n\r\nconst Stations = () => {\r\n    return (\r\n        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n            <Grid item xs={12} sx={{ mb: -2.25 }}>\r\n                <Typography variant=\"h5\">Станции</Typography>\r\n            </Grid>\r\n            <StationList />\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Stations;","import { useState } from \"react\";\r\nimport { Navigate, useLocation } from \"react-router-dom\";\r\nimport { ReadError } from \"utils/customErrors\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeUser } from \"store/reducers/user\";\r\n\r\nexport const useFetching = (callback) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const fetching = async (...args) => {\r\n        try {\r\n            setIsLoading(true)\r\n            await callback(...args)\r\n        } catch (e) {\r\n            if (e instanceof ReadError) {\r\n                if (e.status === 1004) {\r\n                    console.log(e.status);\r\n                    dispatch(removeUser());\r\n                    <Navigate to=\"/login\" state={{ from: location }} replace />\r\n                }\r\n            } else {\r\n                setError(e.message);\r\n            }\r\n\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return [fetching, isLoading, error]\r\n}"],"names":["_ref","date","station","navigate","useNavigate","_useQuery","useQuery","_id","Service","select","data","lastActive","refetchOnWindowFocus","refetchInterval","_jsx","Grid","item","xs","sm","md","lg","children","_jsxs","MainCard","contentSX","p","Box","container","sx","mb","Typography","variant","name","alignContent","Chip","label","activeBool","color","Divider","component","primary","Stack","mt","spacing","interval","placeName","company","concat","moment","Number","format","Button","size","type","onClick","id","state","_useState","useState","_useState2","_slicedToArray","stations","setStations","_useFetching","useFetching","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","stop","_useFetching2","fetchStation","isStatationLoading","stationError","useEffect","_Fragment","map","StationItem","rowSpacing","columnSpacing","StationList","callback","isLoading","setIsLoading","_useState3","_useState4","error","setError","dispatch","useLocation","useDispatch","fetching","_args","arguments","apply","t0","ReadError","status","console","log","removeUser","Navigate","message","finish"],"sourceRoot":""}